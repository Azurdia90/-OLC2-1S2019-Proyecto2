"use strict";
/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function () {
    var o = function (k, v, o, l) { for (o = o || {}, l = k.length; l--; o[k[l]] = v)
        ; return o; }, $V0 = [1, 14], $V1 = [1, 17], $V2 = [1, 18], $V3 = [1, 16], $V4 = [1, 15], $V5 = [1, 19], $V6 = [1, 20], $V7 = [1, 21], $V8 = [1, 22], $V9 = [1, 23], $Va = [1, 24], $Vb = [1, 25], $Vc = [1, 26], $Vd = [5, 18, 22, 25, 27, 28, 30, 32, 33, 37, 38, 40, 41, 43, 44], $Ve = [8, 20, 26], $Vf = [1, 63], $Vg = [1, 64], $Vh = [1, 62], $Vi = [1, 61], $Vj = [1, 60], $Vk = [1, 69], $Vl = [1, 68], $Vm = [1, 67], $Vn = [8, 36, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60], $Vo = [22, 25, 27, 28, 42];
    var parser = { trace: function trace() { },
        yy: {},
        symbols_: { "error": 2, "CUERPO_3D": 3, "LISTA_SENTENCIAS": 4, "EOF": 5, "SENTENCIAS": 6, "SENTENCIA_DECLARACION": 7, "s_dot_coma": 8, "SENTENCIA_ASIGNACION": 9, "SENTENCIA_SALTO_DESTINO": 10, "SENTENCIA_SALTO": 11, "SENTENCIA_IF": 12, "SENTENCIA_IF_FALSE": 13, "SENTENCIA_METODO": 14, "SENTENCIA_LIMPIAR_METODO": 15, "SENTENCIA_LLAMADA_METODO": 16, "SENTENCIA_IMPRIMIR": 17, "r_var": 18, "LISTA_IDENTIFICADORES": 19, "s_asign": 20, "EXPRESION_ARITMETICA": 21, "r_stack": 22, "s_cor_open": 23, "s_cor_close": 24, "r_heap": 25, "s_coma": 26, "identificador": 27, "temporal": 28, "POSICION": 29, "etiqueta": 30, "s_doble_dot": 31, "r_goto": 32, "r_if": 33, "s_par_open": 34, "EXPRESION_RELACIONAL": 35, "s_par_close": 36, "r_iffalse": 37, "r_void": 38, "s_key_open": 39, "s_key_close": 40, "r_clean": 41, "numero": 42, "r_call": 43, "r_print": 44, "s_quote": 45, "tipo_impresion": 46, "DATO_PRIMITIVO": 47, "SIGNO_ARITMETICA": 48, "SIGNO_RELACIONAL": 49, "s_plus": 50, "s_minus": 51, "s_mul": 52, "s_div": 53, "s_mod": 54, "s_greather": 55, "s_less": 56, "s_greather_equal": 57, "s_less_equal": 58, "s_equal": 59, "s_not_equal": 60, "$accept": 0, "$end": 1 },
        terminals_: { 2: "error", 5: "EOF", 8: "s_dot_coma", 18: "r_var", 20: "s_asign", 22: "r_stack", 23: "s_cor_open", 24: "s_cor_close", 25: "r_heap", 26: "s_coma", 27: "identificador", 28: "temporal", 30: "etiqueta", 31: "s_doble_dot", 32: "r_goto", 33: "r_if", 34: "s_par_open", 36: "s_par_close", 37: "r_iffalse", 38: "r_void", 39: "s_key_open", 40: "s_key_close", 41: "r_clean", 42: "numero", 43: "r_call", 44: "r_print", 45: "s_quote", 46: "tipo_impresion", 50: "s_plus", 51: "s_minus", 52: "s_mul", 53: "s_div", 54: "s_mod", 55: "s_greather", 56: "s_less", 57: "s_greather_equal", 58: "s_less_equal", 59: "s_equal", 60: "s_not_equal" },
        productions_: [0, [3, 2], [4, 2], [4, 1], [6, 2], [6, 2], [6, 1], [6, 2], [6, 2], [6, 2], [6, 1], [6, 2], [6, 2], [6, 2], [7, 4], [7, 2], [7, 4], [7, 4], [19, 3], [19, 3], [19, 1], [19, 1], [9, 3], [9, 3], [9, 6], [9, 6], [10, 2], [11, 2], [12, 6], [13, 6], [14, 7], [15, 6], [16, 4], [17, 8], [17, 8], [21, 3], [21, 1], [35, 3], [48, 1], [48, 1], [48, 1], [48, 1], [48, 1], [49, 1], [49, 1], [49, 1], [49, 1], [49, 1], [49, 1], [47, 1], [47, 1], [47, 1], [47, 4], [47, 4], [29, 1], [29, 1], [29, 1]],
        performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
            /* this == yyval */
            var $0 = $$.length - 1;
            switch (yystate) {
                case 1:
                    return $$[$0 - 1];
                    break;
                case 2:
                    $$[$0 - 1].sentencias.push($$[$0]);
                    this.$ = $$[$0 - 1];
                    break;
                case 3:
                    this.$ = { sentencias: [$$[$0]] };
                    break;
                case 4:
                case 5:
                case 7:
                case 8:
                case 9:
                case 11:
                case 12:
                case 13:
                    this.$ = $$[$0 - 1];
                    break;
                case 6:
                case 10:
                case 36:
                    this.$ = $$[$0];
                    break;
                case 14:
                    this.$ = { etiqueta: "sentencia_declaracion", id: $$[$0 - 2], valor: $$[$0] };
                    break;
                case 15:
                    this.$ = { etiqueta: "sentencia_declaracion", id: $$[$0] };
                    break;
                case 18:
                case 19:
                    $$[$0 - 2].push($$[$0]);
                    this.$ = $$[$0 - 2];
                    break;
                case 20:
                case 21:
                    this.$ = [$$[$0]];
                    break;
                case 22:
                    this.$ = { etiqueta: "sentencia_asignacion", tipo: "0", id: $$[$0 - 2], valor: $$[$0] };
                    break;
                case 23:
                    this.$ = { etiqueta: "sentencia_asignacion", tipo: "1", id: $$[$0 - 2], valor: $$[$0] };
                    break;
                case 24:
                    this.$ = { etiqueta: "sentencia_asignacion", tipo: "2", id: $$[$0 - 5], valor: $$[$0], posicion: $$[$0 - 3] };
                    break;
                case 25:
                    this.$ = { etiqueta: "sentencia_asignacion", tipo: "3", id: $$[$0 - 5], valor: $$[$0], posicion: $$[$0 - 3] };
                    break;
                case 26:
                    this.$ = { etiqueta: "salto", expresion: $$[$0 - 1] };
                    break;
                case 27:
                    this.$ = { etiqueta: "sentencia_salto", expresion: $$[$0] };
                    break;
                case 28:
                    this.$ = { etiqueta: "sentencia_if", expresion: $$[$0 - 3], verdadero: $$[$0] };
                    break;
                case 29:
                    this.$ = { etiqueta: "sentencia_if_false", expresion: $$[$0 - 3], falso: $$[$0] };
                    break;
                case 30:
                    this.$ = { etiqueta: "sentencia_metodo", valor: $$[$0 - 5], valor2: $$[$0 - 1] };
                    break;
                case 31:
                    this.$ = { etiqueta: "sentencia_limpiar", valor: $$[$0 - 3], valor2: $$[$0 - 1] };
                    break;
                case 32:
                    this.$ = { etiqueta: "sentencia_llamada", valor: $$[$0 - 2] };
                    break;
                case 33:
                case 34:
                    this.$ = { etiqueta: "sentencia_imprimir", tipo: $$[$0 - 4], valor: $$[$0 - 1] };
                    break;
                case 35:
                    this.$ = { etiqueta: "expresion_aritmetica", operador1: $$[$0 - 2], simbolo: $$[$0 - 1], operador2: $$[$0] };
                    break;
                case 37:
                    this.$ = { etiqueta: "expresion_relacional", operador1: $$[$0 - 2], simbolo: $$[$0 - 1], operador2: $$[$0] };
                    break;
                case 38:
                case 39:
                case 40:
                case 41:
                case 42:
                case 43:
                case 44:
                case 45:
                case 46:
                case 47:
                case 48:
                    this.$ = $$[$0];
                    break;
                case 49:
                    this.$ = { etiqueta: "valor_primitivo", tipo: 0, valor: $$[$0] };
                    break;
                case 50:
                    this.$ = { etiqueta: "valor_primitivo", tipo: 1, valor: $$[$0] };
                    break;
                case 51:
                    this.$ = { etiqueta: "valor_primitivo", tipo: 2, valor: $$[$0] };
                    break;
                case 52:
                    this.$ = { etiqueta: "valor_primitivo", tipo: 3, valor: $$[$0 - 3], pos: $$[$0 - 1] };
                    break;
                case 53:
                    this.$ = { etiqueta: "valor_primitivo", tipo: 4, valor: $$[$0 - 3], pos: $$[$0 - 1] };
                    break;
                case 54:
                    this.$ = { etiqueta: "valor_primitivo", tipo: "0", valor: $$[$0] };
                    break;
                case 55:
                    this.$ = { etiqueta: "valor_primitivo", tipo: "1", valor: $$[$0] };
                    break;
                case 56:
                    this.$ = { etiqueta: "valor_primitivo", tipo: "2", valor: $$[$0] };
                    break;
            }
        },
        table: [{ 3: 1, 4: 2, 6: 3, 7: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 10, 15: 11, 16: 12, 17: 13, 18: $V0, 22: $V1, 25: $V2, 27: $V3, 28: $V4, 30: $V5, 32: $V6, 33: $V7, 37: $V8, 38: $V9, 41: $Va, 43: $Vb, 44: $Vc }, { 1: [3] }, { 5: [1, 27], 6: 28, 7: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 10, 15: 11, 16: 12, 17: 13, 18: $V0, 22: $V1, 25: $V2, 27: $V3, 28: $V4, 30: $V5, 32: $V6, 33: $V7, 37: $V8, 38: $V9, 41: $Va, 43: $Vb, 44: $Vc }, o($Vd, [2, 3]), { 8: [1, 29] }, { 8: [1, 30] }, o($Vd, [2, 6]), { 8: [1, 31] }, { 8: [1, 32] }, { 8: [1, 33] }, o($Vd, [2, 10]), { 8: [1, 34] }, { 8: [1, 35] }, { 8: [1, 36] }, { 19: 37, 22: [1, 38], 25: [1, 39], 27: [1, 40], 28: [1, 41] }, { 20: [1, 42] }, { 20: [1, 43] }, { 23: [1, 44] }, { 23: [1, 45] }, { 31: [1, 46] }, { 30: [1, 47] }, { 34: [1, 48] }, { 34: [1, 49] }, { 27: [1, 50] }, { 34: [1, 51] }, { 27: [1, 52] }, { 34: [1, 53] }, { 1: [2, 1] }, o($Vd, [2, 2]), o($Vd, [2, 4]), o($Vd, [2, 5]), o($Vd, [2, 7]), o($Vd, [2, 8]), o($Vd, [2, 9]), o($Vd, [2, 11]), o($Vd, [2, 12]), o($Vd, [2, 13]), { 8: [2, 15], 20: [1, 54], 26: [1, 55] }, { 23: [1, 56] }, { 23: [1, 57] }, o($Ve, [2, 20]), o($Ve, [2, 21]), { 21: 58, 22: $Vf, 25: $Vg, 27: $Vh, 28: $Vi, 42: $Vj, 47: 59 }, { 21: 65, 22: $Vf, 25: $Vg, 27: $Vh, 28: $Vi, 42: $Vj, 47: 59 }, { 27: $Vk, 28: $Vl, 29: 66, 42: $Vm }, { 27: $Vk, 28: $Vl, 29: 70, 42: $Vm }, o($Vd, [2, 26]), { 8: [2, 27] }, { 22: $Vf, 25: $Vg, 27: $Vh, 28: $Vi, 35: 71, 42: $Vj, 47: 72 }, { 22: $Vf, 25: $Vg, 27: $Vh, 28: $Vi, 35: 73, 42: $Vj, 47: 72 }, { 34: [1, 74] }, { 42: [1, 75] }, { 34: [1, 76] }, { 45: [1, 77] }, { 21: 78, 22: $Vf, 25: $Vg, 27: $Vh, 28: $Vi, 42: $Vj, 47: 59 }, { 27: [1, 79], 28: [1, 80] }, { 24: [1, 81] }, { 24: [1, 82] }, { 8: [2, 22] }, { 8: [2, 36], 48: 83, 50: [1, 84], 51: [1, 85], 52: [1, 86], 53: [1, 87], 54: [1, 88] }, o($Vn, [2, 49]), o($Vn, [2, 50]), o($Vn, [2, 51]), { 23: [1, 89] }, { 23: [1, 90] }, { 8: [2, 23] }, { 24: [1, 91] }, { 24: [2, 54] }, { 24: [2, 55] }, { 24: [2, 56] }, { 24: [1, 92] }, { 36: [1, 93] }, { 49: 94, 55: [1, 95], 56: [1, 96], 57: [1, 97], 58: [1, 98], 59: [1, 99], 60: [1, 100] }, { 36: [1, 101] }, { 36: [1, 102] }, { 26: [1, 103] }, { 36: [1, 104] }, { 46: [1, 105] }, { 8: [2, 14] }, o($Ve, [2, 18]), o($Ve, [2, 19]), { 8: [2, 16] }, { 8: [2, 17] }, { 22: $Vf, 25: $Vg, 27: $Vh, 28: $Vi, 42: $Vj, 47: 106 }, o($Vo, [2, 38]), o($Vo, [2, 39]), o($Vo, [2, 40]), o($Vo, [2, 41]), o($Vo, [2, 42]), { 27: $Vk, 28: $Vl, 29: 107, 42: $Vm }, { 27: $Vk, 28: $Vl, 29: 108, 42: $Vm }, { 20: [1, 109] }, { 20: [1, 110] }, { 32: [1, 111] }, { 22: $Vf, 25: $Vg, 27: $Vh, 28: $Vi, 42: $Vj, 47: 112 }, o($Vo, [2, 43]), o($Vo, [2, 44]), o($Vo, [2, 45]), o($Vo, [2, 46]), o($Vo, [2, 47]), o($Vo, [2, 48]), { 32: [1, 113] }, { 39: [1, 114] }, { 42: [1, 115] }, { 8: [2, 32] }, { 45: [1, 116] }, { 8: [2, 35] }, { 24: [1, 117] }, { 24: [1, 118] }, { 21: 119, 22: $Vf, 25: $Vg, 27: $Vh, 28: $Vi, 42: $Vj, 47: 59 }, { 21: 120, 22: $Vf, 25: $Vg, 27: $Vh, 28: $Vi, 42: $Vj, 47: 59 }, { 30: [1, 121] }, { 36: [2, 37] }, { 30: [1, 122] }, { 4: 123, 6: 3, 7: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 10, 15: 11, 16: 12, 17: 13, 18: $V0, 22: $V1, 25: $V2, 27: $V3, 28: $V4, 30: $V5, 32: $V6, 33: $V7, 37: $V8, 38: $V9, 41: $Va, 43: $Vb, 44: $Vc }, { 36: [1, 124] }, { 26: [1, 125] }, o($Vn, [2, 52]), o($Vn, [2, 53]), { 8: [2, 24] }, { 8: [2, 25] }, { 8: [2, 28] }, { 8: [2, 29] }, { 6: 28, 7: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 10, 15: 11, 16: 12, 17: 13, 18: $V0, 22: $V1, 25: $V2, 27: $V3, 28: $V4, 30: $V5, 32: $V6, 33: $V7, 37: $V8, 38: $V9, 40: [1, 126], 41: $Va, 43: $Vb, 44: $Vc }, { 8: [2, 31] }, { 27: [1, 128], 28: [1, 127] }, o($Vd, [2, 30]), { 36: [1, 129] }, { 36: [1, 130] }, { 8: [2, 33] }, { 8: [2, 34] }],
        defaultActions: { 27: [2, 1], 47: [2, 27], 58: [2, 22], 65: [2, 23], 67: [2, 54], 68: [2, 55], 69: [2, 56], 78: [2, 14], 81: [2, 16], 82: [2, 17], 104: [2, 32], 106: [2, 35], 112: [2, 37], 119: [2, 24], 120: [2, 25], 121: [2, 28], 122: [2, 29], 124: [2, 31], 129: [2, 33], 130: [2, 34] },
        parseError: function parseError(str, hash) {
            if (hash.recoverable) {
                this.trace(str);
            }
            else {
                var error = new Error(str);
                error.hash = hash;
                throw error;
            }
        },
        parse: function parse(input) {
            var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
            var args = lstack.slice.call(arguments, 1);
            var lexer = Object.create(this.lexer);
            var sharedState = { yy: {} };
            for (var k in this.yy) {
                if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
                    sharedState.yy[k] = this.yy[k];
                }
            }
            lexer.setInput(input, sharedState.yy);
            sharedState.yy.lexer = lexer;
            sharedState.yy.parser = this;
            if (typeof lexer.yylloc == 'undefined') {
                lexer.yylloc = {};
            }
            var yyloc = lexer.yylloc;
            lstack.push(yyloc);
            var ranges = lexer.options && lexer.options.ranges;
            if (typeof sharedState.yy.parseError === 'function') {
                this.parseError = sharedState.yy.parseError;
            }
            else {
                this.parseError = Object.getPrototypeOf(this).parseError;
            }
            function popStack(n) {
                stack.length = stack.length - 2 * n;
                vstack.length = vstack.length - n;
                lstack.length = lstack.length - n;
            }
            _token_stack: var lex = function () {
                var token;
                token = lexer.lex() || EOF;
                if (typeof token !== 'number') {
                    token = self.symbols_[token] || token;
                }
                return token;
            };
            var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
            while (true) {
                state = stack[stack.length - 1];
                if (this.defaultActions[state]) {
                    action = this.defaultActions[state];
                }
                else {
                    if (symbol === null || typeof symbol == 'undefined') {
                        symbol = lex();
                    }
                    action = table[state] && table[state][symbol];
                }
                if (typeof action === 'undefined' || !action.length || !action[0]) {
                    var errStr = '';
                    expected = [];
                    for (p in table[state]) {
                        if (this.terminals_[p] && p > TERROR) {
                            expected.push('\'' + this.terminals_[p] + '\'');
                        }
                    }
                    if (lexer.showPosition) {
                        errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                    }
                    else {
                        errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                    }
                    this.parseError(errStr, {
                        text: lexer.match,
                        token: this.terminals_[symbol] || symbol,
                        line: lexer.yylineno,
                        loc: yyloc,
                        expected: expected
                    });
                }
                if (action[0] instanceof Array && action.length > 1) {
                    throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
                }
                switch (action[0]) {
                    case 1:
                        stack.push(symbol);
                        vstack.push(lexer.yytext);
                        lstack.push(lexer.yylloc);
                        stack.push(action[1]);
                        symbol = null;
                        if (!preErrorSymbol) {
                            yyleng = lexer.yyleng;
                            yytext = lexer.yytext;
                            yylineno = lexer.yylineno;
                            yyloc = lexer.yylloc;
                            if (recovering > 0) {
                                recovering--;
                            }
                        }
                        else {
                            symbol = preErrorSymbol;
                            preErrorSymbol = null;
                        }
                        break;
                    case 2:
                        len = this.productions_[action[1]][1];
                        yyval.$ = vstack[vstack.length - len];
                        yyval._$ = {
                            first_line: lstack[lstack.length - (len || 1)].first_line,
                            last_line: lstack[lstack.length - 1].last_line,
                            first_column: lstack[lstack.length - (len || 1)].first_column,
                            last_column: lstack[lstack.length - 1].last_column
                        };
                        if (ranges) {
                            yyval._$.range = [
                                lstack[lstack.length - (len || 1)].range[0],
                                lstack[lstack.length - 1].range[1]
                            ];
                        }
                        r = this.performAction.apply(yyval, [
                            yytext,
                            yyleng,
                            yylineno,
                            sharedState.yy,
                            action[1],
                            vstack,
                            lstack
                        ].concat(args));
                        if (typeof r !== 'undefined') {
                            return r;
                        }
                        if (len) {
                            stack = stack.slice(0, -1 * len * 2);
                            vstack = vstack.slice(0, -1 * len);
                            lstack = lstack.slice(0, -1 * len);
                        }
                        stack.push(this.productions_[action[1]][0]);
                        vstack.push(yyval.$);
                        lstack.push(yyval._$);
                        newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
                        stack.push(newState);
                        break;
                    case 3:
                        return true;
                }
            }
            return true;
        } };
    /* generated by jison-lex 0.3.4 */
    var lexer = (function () {
        var lexer = ({
            EOF: 1,
            parseError: function parseError(str, hash) {
                if (this.yy.parser) {
                    this.yy.parser.parseError(str, hash);
                }
                else {
                    throw new Error(str);
                }
            },
            // resets the lexer, sets new input
            setInput: function (input, yy) {
                this.yy = yy || this.yy || {};
                this._input = input;
                this._more = this._backtrack = this.done = false;
                this.yylineno = this.yyleng = 0;
                this.yytext = this.matched = this.match = '';
                this.conditionStack = ['INITIAL'];
                this.yylloc = {
                    first_line: 1,
                    first_column: 0,
                    last_line: 1,
                    last_column: 0
                };
                if (this.options.ranges) {
                    this.yylloc.range = [0, 0];
                }
                this.offset = 0;
                return this;
            },
            // consumes and returns one char from the input
            input: function () {
                var ch = this._input[0];
                this.yytext += ch;
                this.yyleng++;
                this.offset++;
                this.match += ch;
                this.matched += ch;
                var lines = ch.match(/(?:\r\n?|\n).*/g);
                if (lines) {
                    this.yylineno++;
                    this.yylloc.last_line++;
                }
                else {
                    this.yylloc.last_column++;
                }
                if (this.options.ranges) {
                    this.yylloc.range[1]++;
                }
                this._input = this._input.slice(1);
                return ch;
            },
            // unshifts one char (or a string) into the input
            unput: function (ch) {
                var len = ch.length;
                var lines = ch.split(/(?:\r\n?|\n)/g);
                this._input = ch + this._input;
                this.yytext = this.yytext.substr(0, this.yytext.length - len);
                //this.yyleng -= len;
                this.offset -= len;
                var oldLines = this.match.split(/(?:\r\n?|\n)/g);
                this.match = this.match.substr(0, this.match.length - 1);
                this.matched = this.matched.substr(0, this.matched.length - 1);
                if (lines.length - 1) {
                    this.yylineno -= lines.length - 1;
                }
                var r = this.yylloc.range;
                this.yylloc = {
                    first_line: this.yylloc.first_line,
                    last_line: this.yylineno + 1,
                    first_column: this.yylloc.first_column,
                    last_column: lines ?
                        (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                            + oldLines[oldLines.length - lines.length].length - lines[0].length :
                        this.yylloc.first_column - len
                };
                if (this.options.ranges) {
                    this.yylloc.range = [r[0], r[0] + this.yyleng - len];
                }
                this.yyleng = this.yytext.length;
                return this;
            },
            // When called from action, caches matched text and appends it on next action
            more: function () {
                this._more = true;
                return this;
            },
            // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
            reject: function () {
                if (this.options.backtrack_lexer) {
                    this._backtrack = true;
                }
                else {
                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                        text: "",
                        token: null,
                        line: this.yylineno
                    });
                }
                return this;
            },
            // retain first n characters of the match
            less: function (n) {
                this.unput(this.match.slice(n));
            },
            // displays already matched input, i.e. for error messages
            pastInput: function () {
                var past = this.matched.substr(0, this.matched.length - this.match.length);
                return (past.length > 20 ? '...' : '') + past.substr(-20).replace(/\n/g, "");
            },
            // displays upcoming input, i.e. for error messages
            upcomingInput: function () {
                var next = this.match;
                if (next.length < 20) {
                    next += this._input.substr(0, 20 - next.length);
                }
                return (next.substr(0, 20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
            },
            // displays the character position where the lexing error occurred, i.e. for error messages
            showPosition: function () {
                var pre = this.pastInput();
                var c = new Array(pre.length + 1).join("-");
                return pre + this.upcomingInput() + "\n" + c + "^";
            },
            // test the lexed token: return FALSE when not a match, otherwise return token
            test_match: function (match, indexed_rule) {
                var token, lines, backup;
                if (this.options.backtrack_lexer) {
                    // save context
                    backup = {
                        yylineno: this.yylineno,
                        yylloc: {
                            first_line: this.yylloc.first_line,
                            last_line: this.last_line,
                            first_column: this.yylloc.first_column,
                            last_column: this.yylloc.last_column
                        },
                        yytext: this.yytext,
                        match: this.match,
                        matches: this.matches,
                        matched: this.matched,
                        yyleng: this.yyleng,
                        offset: this.offset,
                        _more: this._more,
                        _input: this._input,
                        yy: this.yy,
                        conditionStack: this.conditionStack.slice(0),
                        done: this.done
                    };
                    if (this.options.ranges) {
                        backup.yylloc.range = this.yylloc.range.slice(0);
                    }
                }
                lines = match[0].match(/(?:\r\n?|\n).*/g);
                if (lines) {
                    this.yylineno += lines.length;
                }
                this.yylloc = {
                    first_line: this.yylloc.last_line,
                    last_line: this.yylineno + 1,
                    first_column: this.yylloc.last_column,
                    last_column: lines ?
                        lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                        this.yylloc.last_column + match[0].length
                };
                this.yytext += match[0];
                this.match += match[0];
                this.matches = match;
                this.yyleng = this.yytext.length;
                if (this.options.ranges) {
                    this.yylloc.range = [this.offset, this.offset += this.yyleng];
                }
                this._more = false;
                this._backtrack = false;
                this._input = this._input.slice(match[0].length);
                this.matched += match[0];
                token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
                if (this.done && this._input) {
                    this.done = false;
                }
                if (token) {
                    return token;
                }
                else if (this._backtrack) {
                    // recover context
                    for (var k in backup) {
                        this[k] = backup[k];
                    }
                    return false; // rule action called reject() implying the next rule should be tested instead.
                }
                return false;
            },
            // return next match in input
            next: function () {
                if (this.done) {
                    return this.EOF;
                }
                if (!this._input) {
                    this.done = true;
                }
                var token, match, tempMatch, index;
                if (!this._more) {
                    this.yytext = '';
                    this.match = '';
                }
                var rules = this._currentRules();
                for (var i = 0; i < rules.length; i++) {
                    tempMatch = this._input.match(this.rules[rules[i]]);
                    if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                        match = tempMatch;
                        index = i;
                        if (this.options.backtrack_lexer) {
                            token = this.test_match(tempMatch, rules[i]);
                            if (token !== false) {
                                return token;
                            }
                            else if (this._backtrack) {
                                match = false;
                                continue; // rule action called reject() implying a rule MISmatch.
                            }
                            else {
                                // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                                return false;
                            }
                        }
                        else if (!this.options.flex) {
                            break;
                        }
                    }
                }
                if (match) {
                    token = this.test_match(match, rules[index]);
                    if (token !== false) {
                        return token;
                    }
                    // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                    return false;
                }
                if (this._input === "") {
                    return this.EOF;
                }
                else {
                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                        text: "",
                        token: null,
                        line: this.yylineno
                    });
                }
            },
            // return next match that has a token
            lex: function lex() {
                var r = this.next();
                if (r) {
                    return r;
                }
                else {
                    return this.lex();
                }
            },
            // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
            begin: function begin(condition) {
                this.conditionStack.push(condition);
            },
            // pop the previously active lexer condition state off the condition stack
            popState: function popState() {
                var n = this.conditionStack.length - 1;
                if (n > 0) {
                    return this.conditionStack.pop();
                }
                else {
                    return this.conditionStack[0];
                }
            },
            // produce the lexer rule set which is active for the currently active lexer condition state
            _currentRules: function _currentRules() {
                if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
                    return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
                }
                else {
                    return this.conditions["INITIAL"].rules;
                }
            },
            // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
            topState: function topState(n) {
                n = this.conditionStack.length - 1 - Math.abs(n || 0);
                if (n >= 0) {
                    return this.conditionStack[n];
                }
                else {
                    return "INITIAL";
                }
            },
            // alias for begin(condition)
            pushState: function pushState(condition) {
                this.begin(condition);
            },
            // return the number of states currently on the stack
            stateStackSize: function stateStackSize() {
                return this.conditionStack.length;
            },
            options: {},
            performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {
                var YYSTATE = YY_START;
                switch ($avoiding_name_collisions) {
                    case 0: /* skip whitespace */
                        break;
                    case 1:
                        return 42;
                        break;
                    case 2:
                        return 46;
                        break;
                    case 3:
                        return 46;
                        break;
                    case 4:
                        return 46;
                        break;
                    case 5:
                        return 20;
                        break;
                    case 6:
                        return 50;
                        break;
                    case 7:
                        return 51;
                        break;
                    case 8:
                        return 52;
                        break;
                    case 9:
                        return 53;
                        break;
                    case 10:
                        return 54;
                        break;
                    case 11:
                        return 56;
                        break;
                    case 12:
                        return 55;
                        break;
                    case 13:
                        return 58;
                        break;
                    case 14:
                        return 57;
                        break;
                    case 15:
                        return 59;
                        break;
                    case 16:
                        return 60;
                        break;
                    case 17:
                        return 34;
                        break;
                    case 18:
                        return 36;
                        break;
                    case 19:
                        return 23;
                        break;
                    case 20:
                        return 24;
                        break;
                    case 21:
                        return 39;
                        break;
                    case 22:
                        return 40;
                        break;
                    case 23:
                        return 45;
                        break;
                    case 24:
                        return 26;
                        break;
                    case 25:
                        return 31;
                        break;
                    case 26:
                        return 8;
                        break;
                    case 27:
                        return 18;
                        break;
                    case 28:
                        return 33;
                        break;
                    case 29:
                        return 37;
                        break;
                    case 30:
                        return 32;
                        break;
                    case 31:
                        return 44;
                        break;
                    case 32:
                        return 22;
                        break;
                    case 33:
                        return 25;
                        break;
                    case 34:
                        return 38;
                        break;
                    case 35:
                        return 43;
                        break;
                    case 36:
                        return 41;
                        break;
                    case 37:
                        return 28;
                        break;
                    case 38:
                        return 30;
                        break;
                    case 39:
                        return 27;
                        break;
                    case 40:
                        return 5;
                        break;
                }
            },
            rules: [/^(?:\s+)/, /^(?:[0-9]+(\.[0-9]+)?\b)/, /^(?:%c\b)/, /^(?:%e\b)/, /^(?:%d\b)/, /^(?:=)/, /^(?:\+)/, /^(?:-)/, /^(?:\*)/, /^(?:\/)/, /^(?:%)/, /^(?:<)/, /^(?:>)/, /^(?:<=)/, /^(?:>=)/, /^(?:==)/, /^(?:!=)/, /^(?:\()/, /^(?:\))/, /^(?:\[)/, /^(?:\])/, /^(?:\{)/, /^(?:\})/, /^(?:")/, /^(?:,)/, /^(?::)/, /^(?:;)/, /^(?:var\b)/, /^(?:if\b)/, /^(?:ifFalse\b)/, /^(?:goto\b)/, /^(?:print\b)/, /^(?:stack\b)/, /^(?:heap\b)/, /^(?:void\b)/, /^(?:call\b)/, /^(?:\$\$_clean_scope\b)/, /^(?:t[0-9]+)/, /^(?:L[0-9]+)/, /^(?:([a-zA-ZñÑ]|(_[a-zA-ZñÑ]))([a-zA-ZñÑ]|_|[0-9])*)/, /^(?:$)/],
            conditions: { "INITIAL": { "rules": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40], "inclusive": true } }
        });
        return lexer;
    })();
    parser.lexer = lexer;
    function Parser() {
        this.yy = {};
    }
    Parser.prototype = parser;
    parser.Parser = Parser;
    return new Parser;
})();
if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
    exports.parser = parser;
    exports.Parser = parser.Parser;
    exports.parse = function () { return parser.parse.apply(parser, arguments); };
    exports.main = function commonjsMain(args) {
        if (!args[1]) {
            console.log('Usage: ' + args[0] + ' FILE');
            process.exit(1);
        }
        var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
        return exports.parser.parse(source);
    };
    if (typeof module !== 'undefined' && require.main === module) {
        exports.main(process.argv.slice(1));
    }
}
